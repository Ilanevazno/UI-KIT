!(function (r, a, s) {
  function h() { return this.init.apply(this, arguments); }h.prototype = {
    defaults: {
      onstatechange() {}, ondragend() {}, onbarclicked() {}, isRange: !1, showLabels: !0, showScale: !0, step: 1, format: '%s', theme: 'theme-green', width: 300, disable: !1, snap: !1,
    },
    template: '<div class="slider-container">\t\t\t<div class="back-bar">                <div class="selected-bar"></div>                <div class="pointer low"></div><div class="pointer-label low">123456</div>                <div class="pointer high"></div><div class="pointer-label high">456789</div>                <div class="clickable-dummy"></div>            </div>            <div class="scale"></div>\t\t</div>',
    init(t, i) { this.options = r.extend({}, this.defaults, i), this.inputNode = r(t), this.options.value = this.inputNode.val() || (this.options.isRange ? `${this.options.from},${this.options.from}` : `${this.options.from}`), this.domNode = r(this.template), this.domNode.addClass(this.options.theme), this.inputNode.after(this.domNode), this.domNode.on('change', this.onChange), this.pointers = r('.pointer', this.domNode), this.lowPointer = this.pointers.first(), this.highPointer = this.pointers.last(), this.labels = r('.pointer-label', this.domNode), this.lowLabel = this.labels.first(), this.highLabel = this.labels.last(), this.scale = r('.scale', this.domNode), this.bar = r('.selected-bar', this.domNode), this.clickableBar = this.domNode.find('.clickable-dummy'), this.interval = this.options.to - this.options.from, this.render(); },
    render() { return this.inputNode.width() !== 0 || this.options.width ? (this.options.width = this.options.width || this.inputNode.width(), this.domNode.width(this.options.width), this.inputNode.hide(), this.isSingle() && (this.lowPointer.hide(), this.lowLabel.hide()), this.options.showLabels || this.labels.hide(), this.attachEvents(), this.options.showScale && this.renderScale(), void this.setValue(this.options.value)) : void console.log('jRange : no width found, returning'); },
    isSingle() { return typeof this.options.value === 'number' || this.options.value.indexOf(',') === -1 && !this.options.isRange; },
    attachEvents() { this.clickableBar.click(r.proxy(this.barClicked, this)), this.pointers.on('mousedown touchstart', r.proxy(this.onDragStart, this)), this.pointers.bind('dragstart', (t) => { t.preventDefault(); }); },
    onDragStart(t) { if (!(this.options.disable || t.type === 'mousedown' && t.which !== 1)) { t.stopPropagation(), t.preventDefault(); const i = r(t.target); this.pointers.removeClass('last-active'), i.addClass('focused last-active'), this[`${i.hasClass('low') ? 'low' : 'high'}Label`].addClass('focused'), r(s).on('mousemove.slider touchmove.slider', r.proxy(this.onDrag, this, i)), r(s).on('mouseup.slider touchend.slider touchcancel.slider', r.proxy(this.onDragEnd, this)); } },
    onDrag(t, i) { i.stopPropagation(), i.originalEvent.touches && i.originalEvent.touches.length ? i = i.originalEvent.touches[0] : i.originalEvent.changedTouches && i.originalEvent.changedTouches.length && (i = i.originalEvent.changedTouches[0]); const s = i.clientX - this.domNode.offset().left; this.domNode.trigger('change', [this, t, s]); },
    onDragEnd(t) { this.pointers.removeClass('focused').trigger('rangeslideend'), this.labels.removeClass('focused'), r(s).off('.slider'), this.options.ondragend.call(this, this.options.value); },
    barClicked(t) { if (!this.options.disable) { const i = t.pageX - this.clickableBar.offset().left; if (this.isSingle()) this.setPosition(this.pointers.last(), i, !0, !0); else { let s; const o = Math.abs(parseFloat(this.pointers.first().css('left'), 10)); const e = this.pointers.first().width() / 2; const n = Math.abs(parseFloat(this.pointers.last().css('left'), 10)); const a = this.pointers.first().width() / 2; const h = Math.abs(o - i + e); const l = Math.abs(n - i + a); s = h == l ? i < o ? this.pointers.first() : this.pointers.last() : h < l ? this.pointers.first() : this.pointers.last(), this.setPosition(s, i, !0, !0); } this.options.onbarclicked.call(this, this.options.value); } },
    onChange(t, i, s, o) { let e; let n; e = 0, n = i.domNode.width(), i.isSingle() || (e = s.hasClass('high') ? parseFloat(i.lowPointer.css('left')) + i.lowPointer.width() / 2 : 0, n = s.hasClass('low') ? parseFloat(i.highPointer.css('left')) + i.highPointer.width() / 2 : i.domNode.width()); const a = Math.min(Math.max(o, e), n); i.setPosition(s, a, !0); },
    setPosition(t, i, s, o) { let e; let n = parseFloat(this.lowPointer.css('left')); let a = parseFloat(this.highPointer.css('left')) || 0; const h = this.highPointer.width() / 2; if (s || (i = this.prcToPx(i)), this.options.snap) { const l = this.correctPositionForSnap(i); if (l === -1) return; i = l; }t[0] === this.highPointer[0] ? a = Math.round(i - h) : n = Math.round(i - h), t[o ? 'animate' : 'css']({ left: Math.round(i - h) }), this.isSingle() ? e = 0 : e = n + h; const r = Math.round(a + h - e); this.bar[o ? 'animate' : 'css']({ width: Math.abs(r), left: r > 0 ? e : e + r }), this.showPointerValue(t, i, o), this.isReadonly(); },
    correctPositionForSnap(t) { const i = this.positionToValue(t) - this.options.from; const s = this.options.width / (this.interval / this.options.step); const o = i / this.options.step * s; return t <= o + s / 2 && o - s / 2 <= t ? o : -1; },
    setValue(t) { const i = t.toString().split(','); i[0] = `${Math.min(Math.max(i[0], this.options.from), this.options.to)}`, i.length > 1 && (i[1] = `${Math.min(Math.max(i[1], this.options.from), this.options.to)}`), this.options.value = t; const s = this.valuesToPrc(i.length === 2 ? i : [0, i[0]]); this.isSingle() || this.setPosition(this.lowPointer, s[0]), this.setPosition(this.highPointer, s[1]); },
    renderScale() { for (var t = this.options.scale || [this.options.from, this.options.to], i = Math.round(100 / (t.length - 1) * 10) / 10, s = '', o = 0; o < t.length; o++)s += `<span style="left: ${o * i}%">${t[o] != '|' ? `<ins>${t[o]}</ins>` : ''}</span>`; this.scale.html(s), r('ins', this.scale).each(function () { r(this).css({ marginLeft: -r(this).outerWidth() / 2 }); }); },
    getBarWidth() { const t = this.options.value.split(','); return t.length > 1 ? parseFloat(t[1]) - parseFloat(t[0]) : parseFloat(t[0]); },
    showPointerValue(t, i, s) { let o; const e = r('.pointer-label', this.domNode)[t.hasClass('low') ? 'first' : 'last'](); const n = this.positionToValue(i); if (r.isFunction(this.options.format)) { const a = this.isSingle() ? void 0 : t.hasClass('low') ? 'low' : 'high'; o = this.options.format(n, a); } else o = this.options.format.replace('%s', n); const h = e.html(o).width(); let l = i - h / 2; l = Math.min(Math.max(l, 0), this.options.width - h), e[s ? 'animate' : 'css']({ left: l }), this.setInputValue(t, n); },
    valuesToPrc(t) { return [100 * (parseFloat(t[0]) - parseFloat(this.options.from)) / this.interval, 100 * (parseFloat(t[1]) - parseFloat(this.options.from)) / this.interval]; },
    prcToPx(t) { return this.domNode.width() * t / 100; },
    isDecimal() { return (this.options.value + this.options.from + this.options.to).indexOf('.') !== -1; },
    positionToValue(t) { let i = t / this.domNode.width() * this.interval; if (i = parseFloat(i, 10) + parseFloat(this.options.from, 10), this.isDecimal()) { let s = Math.round(Math.round(i / this.options.step) * this.options.step * 100) / 100; if (s !== 0) for ((s = `${s}`).indexOf('.') === -1 && (s += '.'); s.length - s.indexOf('.') < 3;)s += '0'; else s = '0.00'; return s; } return Math.round(i / this.options.step) * this.options.step; },
    setInputValue(t, i) { if (this.isSingle()) this.options.value = i.toString(); else { const s = this.options.value.split(','); t.hasClass('low') ? this.options.value = `${i},${s[1]}` : this.options.value = `${s[0]},${i}`; } this.inputNode.val() !== this.options.value && (this.inputNode.val(this.options.value).trigger('change'), this.options.onstatechange.call(this, this.options.value)); },
    getValue() { return this.options.value; },
    getOptions() { return this.options; },
    getRange() { return `${this.options.from},${this.options.to}`; },
    isReadonly() { this.domNode.toggleClass('slider-readonly', this.options.disable); },
    disable() { this.options.disable = !0, this.isReadonly(); },
    enable() { this.options.disable = !1, this.isReadonly(); },
    toggleDisable() { this.options.disable = !this.options.disable, this.isReadonly(); },
    updateRange(t, i) { const s = t.toString().split(','); this.interval = parseInt(s[1]) - parseInt(s[0]), i ? this.setValue(i) : this.setValue(this.getValue()); },
  }; const l = 'jRange'; r.fn[l] = function (o) { let e; const n = arguments; return this.each(function () { const t = r(this); let i = r.data(this, `plugin_${l}`); const s = typeof o === 'object' && o; i || (t.data(`plugin_${l}`, i = new h(this, s)), r(a).resize(() => { i.setValue(i.getValue()); })), typeof o === 'string' && (e = i[o].apply(i, Array.prototype.slice.call(n, 1))); }), e || this; };
}(jQuery, window, document));
